{"ast":null,"code":"import io from \"socket.io-client/dist/socket.io\";\nexport default function initSocket() {\n  var socket = io(\"http://10.0.0.3:3000\", {\n    jsonp: false\n  });\n\n  if (socket) {\n    console.log(\"from inicilizer socket\");\n    console.log(\"got socket:\");\n  }\n\n  socket.onAny(function (event) {\n    console.log(\"ANY \" + event);\n  });\n  socket.on(\"connect_error\", function () {\n    setTimeout(function () {\n      socket.connect();\n    }, 1000);\n  });\n  socket.on(\"disconnect\", function (reason) {\n    console.log(\"disconected\");\n  });\n  return socket;\n}","map":{"version":3,"sources":["/home/telix/Makipura/frontend/inicializers/socket.js"],"names":["io","initSocket","socket","jsonp","console","log","onAny","event","on","setTimeout","connect","reason"],"mappings":"AAAA,OAAOA,EAAP,MAAe,iCAAf;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC,MAAMC,MAAM,GAAGF,EAAE,CACf,sBADe,EAGf;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAHe,CAAjB;;AAMA,MAAGD,MAAH,EAAU;AACRE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAID;;AAEDH,EAAAA,MAAM,CAACI,KAAP,CAAa,UAACC,KAAD,EAAW;AACtBH,IAAAA,OAAO,CAACC,GAAR,UAAmBE,KAAnB;AACD,GAFD;AAGAL,EAAAA,MAAM,CAACM,EAAP,CAAU,eAAV,EAA2B,YAAM;AAE/BC,IAAAA,UAAU,CAAC,YAAM;AACfP,MAAAA,MAAM,CAACQ,OAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAEU,GAJZ;AAKAR,EAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAwB,UAACG,MAAD,EAAY;AAClCP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;AAGA,SAAOH,MAAP;AACD","sourcesContent":["import io from \"socket.io-client/dist/socket.io\"; \n\nexport default function initSocket() {\n\t\tconst socket = io( \n\t\t\t\t\"http://10.0.0.3:3000\", \n\t\t\t\t//'http://192.168.1.219:3000',\n\t\t\t\t{ jsonp: false }\n\t\t);\n\n\t\tif(socket){\n\t\t\t\tconsole.log(\"from inicilizer socket\")\n\t\t\t\tconsole.log(\"got socket:\");\n\t\t\t\t//console.log(socket);\n\t\t\t\t//props.setSocket(socket);\n\t\t\t\t//console.log(\"dispatched socket\");\n\t\t}\n\n\t\tsocket.onAny((event) => {\n\t\t\t\tconsole.log(`ANY ${event}`);\n\t\t});\n\t\tsocket.on(\"connect_error\", () => {  \n\t\t\t\t//console.log(\"connection error\");\n\t\t\t\tsetTimeout(() => {    \n\t\t\t\t\t\tsocket.connect();  \n\t\t\t\t}, 1000);});\n\t\tsocket.on(\"disconnect\", (reason) => {\n\t\t\t\tconsole.log(\"disconected\");\n\t\t});\n\t\treturn socket;\n}\n\n"]},"metadata":{},"sourceType":"module"}