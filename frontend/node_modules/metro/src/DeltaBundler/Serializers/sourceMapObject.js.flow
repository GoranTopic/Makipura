  return generator.toMap(undefined, {
  return generator.toMap(undefined, {
 * @format
  const generator = sourceMapGenerator(modules, options);
}
}
} = require('./sourceMapGenerator');
  sourceMapGeneratorNonBlocking,
function sourceMapObject(
  sourceMapGenerator,
 */
  modules: $ReadOnlyArray<Module<>>,
  modules: $ReadOnlyArray<Module<>>,
    +processModuleFilter: (module: Module<>) => boolean,
    +processModuleFilter: (module: Module<>) => boolean,
'use strict';
    excludeSource: options.excludeSource,
    excludeSource: options.excludeSource,
  const generator = await sourceMapGeneratorNonBlocking(modules, options);
  options: {|
  options: {|
async function sourceMapObjectNonBlocking(
): Promise<MixedSourceMap> {
import type {Module} from '../types.flow';
import type {MixedSourceMap} from 'metro-source-map';
/**
};
  sourceMapObject,
 *
 *
  |},
  |},
module.exports = {






 * Copyright (c) Facebook, Inc. and its affiliates.
  sourceMapObjectNonBlocking,
): MixedSourceMap {
 * @flow strict-local
const {
 * LICENSE file in the root directory of this source tree.
 * This source code is licensed under the MIT license found in the
  });
  });
    +excludeSource: boolean,
    +excludeSource: boolean,
