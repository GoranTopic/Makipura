module.exports = {
 * LICENSE file in the root directory of this source tree.
): Promise<MixedSourceMap> {
  sourceMapGenerator,
    +processModuleFilter: (module: Module<>) => boolean,
    +processModuleFilter: (module: Module<>) => boolean,
function sourceMapObject(
 * @flow strict-local
 */
  modules: $ReadOnlyArray<Module<>>,
  modules: $ReadOnlyArray<Module<>>,
import type {MixedSourceMap} from 'metro-source-map';
}
}
  |},
  |},
  const generator = await sourceMapGeneratorNonBlocking(modules, options);
  });
  });
};
): MixedSourceMap {
const {






    excludeSource: options.excludeSource,
    excludeSource: options.excludeSource,
 * Copyright (c) Facebook, Inc. and its affiliates.
  options: {|
  options: {|
 * This source code is licensed under the MIT license found in the
  return generator.toMap(undefined, {
  return generator.toMap(undefined, {
} = require('./sourceMapGenerator');
import type {Module} from '../types.flow';
'use strict';
  sourceMapObjectNonBlocking,
 * @format
    +excludeSource: boolean,
    +excludeSource: boolean,
  sourceMapObject,
/**
  sourceMapGeneratorNonBlocking,
 *
 *
  const generator = sourceMapGenerator(modules, options);
async function sourceMapObjectNonBlocking(
