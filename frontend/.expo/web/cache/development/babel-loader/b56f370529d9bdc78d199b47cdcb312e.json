{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/telix/Makipura/frontend/components/buttons/LoadingButton.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useState } from 'react';\nimport { DotsLoader } from 'react-native-indicator';\nexport default function LoadingButton(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var title = props.title,\n      onPress = props.onPress,\n      loader = props.loader;\n\n  var handlePress = function handlePress() {\n    return _regeneratorRuntime.async(function handlePress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(onPress().then(setLoading(true)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(DotsLoader, {\n    size: 20,\n    betweenSpace: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }) : React.createElement(Button, {\n    style: [styles.button],\n    title: title,\n    onPress: handlePress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    height: '50%',\n    width: '100%',\n    margin: 5,\n    flexDirection: \"row\",\n    borderRadius: 20,\n    borderWidth: 1,\n    padding: 5\n  }\n});","map":{"version":3,"sources":["/home/telix/Makipura/frontend/components/buttons/LoadingButton.js"],"names":["React","useState","DotsLoader","LoadingButton","props","loading","setLoading","title","onPress","loader","handlePress","then","styles","container","button","StyleSheet","create","backgroundColor","alignItems","justifyContent","height","width","margin","flexDirection","borderRadius","borderWidth","padding"],"mappings":";;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA4B,wBAA5B;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAC1C,kBAA8BH,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOI,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAQC,KAAR,GAAmCH,KAAnC,CAAQG,KAAR;AAAA,MAAeC,OAAf,GAAmCJ,KAAnC,CAAeI,OAAf;AAAA,MAAwBC,MAAxB,GAAmCL,KAAnC,CAAwBK,MAAxB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAClBJ,YAAAA,UAAU,CAAC,IAAD,CAAV;AADkB;AAAA,6CAEZE,OAAO,GACVG,IADG,CACEL,UAAU,CAAC,IAAD,CADZ,CAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIR,OAAO,GACP,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,EAAlB;AACE,IAAA,YAAY,EAAE,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAGP,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,CAACO,MAAM,CAACE,MAAR,CAAf;AACM,IAAA,KAAK,EAAEP,KADb;AAEE,IAAA,OAAO,EAAEG,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AAWD;AAED,IAAME,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,eAAe,EAAE,MADR;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/BL,EAAAA,MAAM,EAAE;AACNM,IAAAA,MAAM,EAAE,KADF;AAENC,IAAAA,KAAK,EAAE,MAFD;AAGNC,IAAAA,MAAM,EAAE,CAHF;AAINC,IAAAA,aAAa,EAAE,KAJT;AAKNC,IAAAA,YAAY,EAAE,EALR;AAMNC,IAAAA,WAAW,EAAE,CANP;AAONC,IAAAA,OAAO,EAAE;AAPH;AANuB,CAAlB,CAAf","sourcesContent":["/* a button that when pressed diplayes a loding animation */\nimport { StyleSheet, View, Pressable, Button, Text } from 'react-native';\nimport React, { useState } from 'react';\nimport { DotsLoader, } from 'react-native-indicator';\n\nexport default function LoadingButton(props){\n\t\tconst [loading, setLoading] = useState(false);\n\t\tconst { title, onPress, loader } = props;\n\t\t\n\t\tconst handlePress = async () => {\n\t\t\t\tsetLoading(true);\n\t\t\t\tawait onPress()\n\t\t\t\t\t\t.then(setLoading(true));\n\t\t}\n\t\t\n\t\treturn(\n\t\t\t\t<View style={styles.container}>  \n\t\t\t\t\t\t{ loading?\n\t\t\t\t\t\t\t\t<DotsLoader size={20}\n\t\t\t\t\t\t\t\t\t\tbetweenSpace={7} /> :\n\t\t\t\t\t\t\t\t<Button style={[styles.button,]} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\t\tonPress={handlePress}/> } \n\t\t\t\t</View> \n\t\t);\n\n}\n\nconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t},\n\t\tbutton: {\n\t\t\t\theight: '50%',\n\t\t\t\twidth: '100%',\n\t\t\t\tmargin: 5,\n\t\t\t\tflexDirection: \"row\",\n\t\t\t\tborderRadius: 20,\n\t\t\t\tborderWidth: 1,\n\t\t\t\tpadding: 5,\n\t\t},\n});\n\t\n"]},"metadata":{},"sourceType":"module"}